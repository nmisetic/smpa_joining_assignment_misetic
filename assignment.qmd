---
title: "Joining Assignment"
author: "Nikola Misetic"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load libraries and establish settings

```{r}
options(scipen=999)
library(tidyverse)
library(janitor)
```

## Getting Started

This week we'll be combining and joining data to make it more useful and to ask some questions about it. We'll use Maryland 2022 primary election results to do this, and our main question will be this: Which precincts had the most votes cast at them statewide, counting both the Republican and Democratic primaries?

To answer this question, we'll need to first combine the two parties' primary precinct results into a single dataframe and then join it to data that has more information about each voting location.

First, load the two precinct results CSV files in the `data` folder, one each for the Democratic and Republican primaries, and then combine them into a single dataframe. You'll need to clean up the column names to make the data easier to work with - make sure you have loaded the library to do that.

Load the two datasets here:

```{r}
primary_dem <- read_csv("data/md_primary_precinct_dem.csv") %>% 
  mutate(`Election District - Precinct` = as.character(`Election District - Precinct`))

glimpse(primary_dem)

primary_rep <- read_csv("data/md_primary_precinct_rep.csv") %>% 
  mutate(`Election District - Precinct` = as.character(`Election District - Precinct`))
```

Now Combine (stack) the two dataframes into one combined dataframe, so all the records from both tables are in one place to use.

```{r}
full_join(primary_dem, primary_rep)

# I used the full join in order to make sure all the data was included
```

Then use janitor's clean_names() function to clean up the column names so all spaces, punctuation and letter cases are dealt with.

To use clean_names() you apply it to your dataframe like:

`data <- data %>%`

`clean_names()`

```{r}
primary_all <- full_join(primary_dem, primary_rep) %>% 
  clean_names()

# I used the same code as before in order to store all the data properly
```

Next, let's read in the precinct voting location data and clean up the column names:

```{r}
precinct_voting_locations <- read_csv('data/precinct_voting_locations.csv') %>%
  clean_names()

```

Next use left_join() to join the two tables based on the unique combination of precinct and county. When joining on two sets of columns, you'll use the `by =` argument in your join function along with the `c()`, like this:

`by = c("firstcolumn_table1" = "firstcolumn_table2", "secondcolumn_table1" = "secondcolumn_table2"))`

```{r}
left_join(precinct_voting_locations, primary_all, by = c("precinct_code" = "election_district_precinct", "county_code" = "county"))%>% 
  clean_names()

precinct_county <- left_join(precinct_voting_locations, primary_all, by = c("precinct_code" = "election_district_precinct", "county_code" = "county"))

# I used these columns because they best fit the question's description. I also created a new table from this data in order to use it for the following questions
```

## Answer questions

### Q1.

Write code to produce a `votes` column which is the result of adding together `early_votes`, `election_night_votes`, `provisional_votes` and the mail-in votes, overwriting your dataframe so that it now has that `votes` column permanently.

```{r}
precinct_county_votes <- precinct_county %>% 
  group_by(county_name, precinct_code) %>%
  mutate(votes= sum(early_votes, election_night_votes, provisional_votes, mail_in_ballot_1_votes, mail_in_ballot_2_votes))

# I grouped by both county name and precinct code so that the vote totals would be easier to see, then performed a mutate function in order to visualize the total votes per grouping.
```

Next, separately write code to show each county and precinct and calculate the total votes in the Governor's race - bearing in mind that each precinct will have multiple rows in the dataframe, but you only want to see one row for each precinct. (So you'll want to use grouping and summarizing.)

```{r}
precinct_county %>% 
  group_by(county_name) %>% 
  filter(office_name=="Governor / Lt. Governor") %>% 
  summarise(votes = sum(early_votes, election_night_votes, provisional_votes, mail_in_ballot_1_votes, mail_in_ballot_2_votes)) %>% 
  arrange(desc(votes))

precinct_county %>% 
  group_by(precinct_code) %>% 
  filter(office_name=="Governor / Lt. Governor") %>% 
  summarise(votes = sum(early_votes, election_night_votes, provisional_votes, mail_in_ballot_1_votes, mail_in_ballot_2_votes)) %>% 
  arrange(desc(votes))

# I grouped by precinct and filtered for Governor's races, so that there is less data to sift through. I then used the same code as the previous question in order to tally the votes
```

What is the name and voting location of the precinct that saw the most votes in the governor's race? *Precinct Code 1001- Orleans Volunteer Fire Dept*

### Q2.

Let's look at the average number of votes in each party's primary race for governor. Take the code you wrote for the last part of Q1, save the results to a new variable and then find the precincts with 0 total votes for governor.

```{r}
county_total_votes <- precinct_county %>% 
  group_by(county_name) %>% 
  filter(office_name=="Governor / Lt. Governor") %>% 
  mutate(votes = sum(early_votes, election_night_votes, provisional_votes, mail_in_ballot_1_votes, mail_in_ballot_2_votes)) %>% 
  arrange(desc(votes))

precinct_total_votes <- precinct_county %>% 
  group_by(precinct_code) %>% 
  filter(office_name=="Governor / Lt. Governor") %>% 
  mutate(votes = sum(early_votes, election_night_votes, provisional_votes, mail_in_ballot_1_votes, mail_in_ballot_2_votes)) %>% 
  filter(votes==0)

# By examining the new precinct table and filtering for 0 votes, we can see that there are 2 counties with 0 votes
```

How many precincts are there, and which county has the most? *There are 749 Precincts, with Baltimore City County having the most*

What else would you need to know about these precincts to know whether this might be worth a story? *Who the people voted for, or if the vote swung from previous elections*

### Q3.

Choose your own adventure: I want you to come up with a question you could ask of one of the dataframes we've created for this lab. It could involve candidates, or counties or types of voting, but it cannot be a variation of a previous question (so, for example, you can't ask, "What's the average number of votes per precinct in the U.S. Senate primary?").

First write the question and then try to answer it by writing code. If you're not sure of the exact code at a minimum, describe what you think you'd have to do to answer it and what the results would look like.

```{r}





```
